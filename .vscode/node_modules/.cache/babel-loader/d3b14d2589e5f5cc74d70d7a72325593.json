{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\kribble\\\\src\\\\Components\\\\CanvasContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CanvasContext = /*#__PURE__*/React.createContext();\nexport const CanvasProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [isDrawing, setIsDrawing] = useState(false);\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n\n  const prepareCanvas = () => {\n    const canvas = canvasRef.current;\n    canvas.width = window.innerWidth * 2;\n    canvas.height = window.innerHeight * 2;\n    canvas.style.width = `${window.innerWidth}px`;\n    canvas.style.height = `${window.innerHeight}px`;\n    const context = canvas.getContext(\"2d\");\n    context.scale(2, 2);\n    context.lineCap = \"round\";\n    context.strokeStyle = \"black\";\n    context.lineWidth = 5;\n    contextRef.current = context;\n  };\n\n  const startDrawing = _ref2 => {\n    let {\n      nativeEvent\n    } = _ref2;\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n  };\n\n  const finishDrawing = () => {\n    contextRef.current.closePath();\n    setIsDrawing(false);\n  };\n\n  const draw = _ref3 => {\n    let {\n      nativeEvent\n    } = _ref3;\n\n    if (!isDrawing) {\n      return;\n    }\n\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.lineTo(offsetX, offsetY);\n    contextRef.current.stroke();\n  };\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    context.fillStyle = \"white\";\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  };\n\n  return /*#__PURE__*/_jsxDEV(CanvasContext.Provider, {\n    value: {\n      canvasRef,\n      contextRef,\n      prepareCanvas,\n      startDrawing,\n      finishDrawing,\n      clearCanvas,\n      draw\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CanvasProvider, \"VPVZB3P3tcVPAAzwQH9S33Q8E8k=\");\n\n_c = CanvasProvider;\nexport const useCanvas = () => {\n  _s2();\n\n  return useContext(CanvasContext);\n};\n\n_s2(useCanvas, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CanvasProvider\");","map":{"version":3,"sources":["C:/Projects/kribble/src/Components/CanvasContext.js"],"names":["React","useContext","useRef","useState","CanvasContext","createContext","CanvasProvider","children","isDrawing","setIsDrawing","canvasRef","contextRef","prepareCanvas","canvas","current","width","window","innerWidth","height","innerHeight","style","context","getContext","scale","lineCap","strokeStyle","lineWidth","startDrawing","nativeEvent","offsetX","offsetY","beginPath","moveTo","finishDrawing","closePath","draw","lineTo","stroke","clearCanvas","fillStyle","fillRect","useCanvas"],"mappings":"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","sourcesContent":["import React, { useContext, useRef, useState } from \"react\";\r\n\r\nconst CanvasContext = React.createContext();\r\n\r\nexport const CanvasProvider = ({ children }) => {\r\n  const [isDrawing, setIsDrawing] = useState(false)\r\n  const canvasRef = useRef(null);\r\n  const contextRef = useRef(null);\r\n\r\n  const prepareCanvas = () => {\r\n    const canvas = canvasRef.current\r\n    canvas.width = window.innerWidth * 2;\r\n    canvas.height = window.innerHeight * 2;\r\n    canvas.style.width = `${window.innerWidth}px`;\r\n    canvas.style.height = `${window.innerHeight}px`;\r\n\r\n    const context = canvas.getContext(\"2d\")\r\n    context.scale(2, 2);\r\n    context.lineCap = \"round\";\r\n    context.strokeStyle = \"black\";\r\n    context.lineWidth = 5;\r\n    contextRef.current = context;\r\n  };\r\n\r\n  const startDrawing = ({ nativeEvent }) => {\r\n    const { offsetX, offsetY } = nativeEvent;\r\n    contextRef.current.beginPath();\r\n    contextRef.current.moveTo(offsetX, offsetY);\r\n    setIsDrawing(true);\r\n  };\r\n\r\n  const finishDrawing = () => {\r\n    contextRef.current.closePath();\r\n    setIsDrawing(false);\r\n  };\r\n\r\n  const draw = ({ nativeEvent }) => {\r\n    if (!isDrawing) {\r\n      return;\r\n    }\r\n    const { offsetX, offsetY } = nativeEvent;\r\n    contextRef.current.lineTo(offsetX, offsetY);\r\n    contextRef.current.stroke();\r\n  };\r\n\r\n  const clearCanvas = () => {\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext(\"2d\")\r\n    context.fillStyle = \"white\"\r\n    context.fillRect(0, 0, canvas.width, canvas.height)\r\n  }\r\n\r\n  return (\r\n    <CanvasContext.Provider\r\n      value={{\r\n        canvasRef,\r\n        contextRef,\r\n        prepareCanvas,\r\n        startDrawing,\r\n        finishDrawing,\r\n        clearCanvas,\r\n        draw,\r\n      }}\r\n    >\r\n      {children}\r\n    </CanvasContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useCanvas = () => useContext(CanvasContext);"]},"metadata":{},"sourceType":"module"}